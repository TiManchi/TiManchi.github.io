<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数组和链表的常见题型</title>
      <link href="/2022/03/29/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E8%A7%81%E9%A2%98%E5%9E%8B/"/>
      <url>/2022/03/29/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E8%A7%81%E9%A2%98%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="翻转句子里的单词"><a href="#翻转句子里的单词" class="headerlink" title="翻转句子里的单词"></a>翻转句子里的单词</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>现在有一个小任务，假设有一个字符串 “<strong>I love coding</strong>”，要求将里面单词的顺序翻转，但是单词内部的字母顺序不变，也就是翻转之后结果为 “<strong>coding love I</strong>“。</p><h3 id="求解思路"><a href="#求解思路" class="headerlink" title="求解思路"></a>求解思路</h3><ul><li><p>将字符串分割成若干个子串。</p></li><li><p>利用中心对称，将字符串转换成为倒序的。</p></li><li><p>遍历子串，去掉多余的空格，每个有效的子串后面增加一个空格。</p></li><li><p>去掉结果最后多余的空格。</p></li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">reverseWords</span> = s =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> arr = s.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = arr.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        arr[i] &amp;&amp; res.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="寻找最长回文子串"><a href="#寻找最长回文子串" class="headerlink" title="寻找最长回文子串"></a>寻找最长回文子串</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>“上海自来水来自海上”，这句话不管是顺着读还是逆着读，都是一样的，这就是回文串。给出一个字符串 s，找到 s 里面包含的<strong>最长</strong>的回文串</p><p>例子</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = abddbc</span><br><span class="line">输出：bd</span><br></pre></td></tr></table></figure><h3 id="求解思路-1"><a href="#求解思路-1" class="headerlink" title="求解思路"></a>求解思路</h3><p>我们知道回文串是顺序或者逆序，都是一样的，那么就说明回文串都有一个中心，也就是对称轴，比如 abba，对称轴是两个 b 字符之间。 abcba 的对称轴则是 c。也就是以下规律：</p><ul><li>字符数为奇数的回文串的中心是一个字符。</li><li>字符数为偶数的回文串的中心是两个字符的间隙。</li></ul><p><img src="https://wyr-image.oss-cn-beijing.aliyuncs.com/img/902b21c597bf20004f8bac266a9cc457-0.png"></p><p>怎么能兼容两种 case 呢？我们可以设计一个方法，传入两个索引参数，如果两个参数相同，中心往两边拓展的时候，拓展出来的字符数是奇数。如果两个索引参数是相邻的两个数，那么拓展出来的字符数就是偶数。</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestPalindrome = <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="comment">// 思路：从中间开始向两边扩散来判断回文串</span></span><br><span class="line">  <span class="keyword">let</span> <span class="title function_">palindrome</span> = (<span class="params">s, l, r</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">while</span> (l &gt;= <span class="number">0</span> &amp;&amp; r &lt; s.<span class="property">length</span> &amp;&amp; s[l] == s[r]) &#123;</span><br><span class="line">      <span class="comment">// 向两边展开</span></span><br><span class="line">      l--;</span><br><span class="line">      r++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回以s[l]和s[r]为中心的最长回文串</span></span><br><span class="line">    <span class="keyword">return</span> s.<span class="title function_">slice</span>(l+<span class="number">1</span>, r);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 中心为 i 的奇数个回文串</span></span><br><span class="line">    <span class="keyword">let</span> s1 = <span class="title function_">palindrome</span>(s, i, i);</span><br><span class="line">    <span class="comment">// 中心为 i 和 i+1 的偶数个回文串</span></span><br><span class="line">    <span class="keyword">let</span> s2 = <span class="title function_">palindrome</span>(s, i, i + <span class="number">1</span>);</span><br><span class="line">    res = res.<span class="property">length</span> &gt; s1.<span class="property">length</span> ? res : s1;</span><br><span class="line">    res = res.<span class="property">length</span> &gt; s2.<span class="property">length</span> ? res : s2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="字符串转整数"><a href="#字符串转整数" class="headerlink" title="字符串转整数"></a>字符串转整数</h2><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><p>偶尔我们会遇到一些情况，输入一个字符串，要转换成为一个整数，现在有一个小任务，需要我们将字符串转换成为 32 位的有符号的整数，当然有一些小的规则：</p><ul><li>如果字符串的前面有空格，那么可以忽略</li><li>符号只能存在于数字前面，也就是类似“+3”，“-2”,而 “2-1” 则是只能读取到 2，后面不规则的需要忽略。</li><li>如果超过了 32 位有符号整数的范围，需要将其截断，大于 2^31-1 则返回 2^31-1，小于 -2^31 则返回 -2^31</li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>去掉首尾空格之后，如果第一个符号为-，则表示负号<br>如果第一个符号为+，则表示正数，当然+是可选的<br>遍历去掉首尾空格后的字符串，如果当前字符是数字，则累加（累加的时候判断是否溢出，如果溢出则直接按照题意返回就行了），否则就可以直接退出了</p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">str</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> strToInt = <span class="keyword">function</span> (<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 正负号，默认正号</span></span><br><span class="line">    negativeSymbol = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 把首尾的空格都去掉</span></span><br><span class="line">  str = str.<span class="title function_">trim</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 负数</span></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; str[i] == <span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line">      negativeSymbol = -<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">      <span class="comment">// 正数</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; str[i] == <span class="string">&quot;+&quot;</span>) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="comment">// 因为空格会被转成0，所以要排除空格的情况，也就是说在数字范围内就加上</span></span><br><span class="line">    <span class="keyword">if</span> (str[i] &gt;= <span class="number">0</span> &amp;&amp; str[i] &lt;= <span class="number">9</span> &amp;&amp; str[i] != <span class="string">&quot; &quot;</span>) &#123;</span><br><span class="line">      res = res * <span class="number">10</span> + (str[i] - <span class="number">0</span>);</span><br><span class="line">      <span class="comment">// 为什么在这里就判断呢，因为这里如果就溢出的话，就提前退出，不需要再后面无意义的计算了</span></span><br><span class="line">      <span class="keyword">if</span> (res * negativeSymbol &lt;= -<span class="number">2147483648</span>) <span class="keyword">return</span> -<span class="number">2147483648</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (res * negativeSymbol &gt;= <span class="number">2147483647</span>) <span class="keyword">return</span> <span class="number">2147483647</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res * negativeSymbol;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组和链表的常见题型</title>
      <link href="/2022/03/28/%E6%95%B0%E7%BB%84%E5%92%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B8%B8%E8%A7%81%E9%A2%98%E5%9E%8B/"/>
      <url>/2022/03/28/%E6%95%B0%E7%BB%84%E5%92%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B8%B8%E8%A7%81%E9%A2%98%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>数组在计算机中是以连续空间的形态存在，而链表则是不要求空间连续，每一个元素都保存着下一个元素的地址，使其更加灵活。</p><h2 id="约瑟夫环问题"><a href="#约瑟夫环问题" class="headerlink" title="约瑟夫环问题"></a>约瑟夫环问题</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h3><p>著名的约瑟夫问题：编号为 <code>1-N</code> 的 <code>N</code> 个士兵围坐在一起形成一个圆圈，从编号为 1 的士兵开始依次报数（1，2，3… 这样依次报数），数到 m 的 士兵会被淘汰出列，之后的士兵再从 1 开始报数。直到最后剩下一个士兵，求这个士兵的编号。</p><h3 id="求解思路"><a href="#求解思路" class="headerlink" title="求解思路"></a><strong>求解思路</strong></h3><p>假设我们现在需要使用数组解决该问题，用一个数组存在 1，2，3，4，5 … 编号，要求返回最后一个士兵的编号。思路如下</p><ul><li>初始化剩下的士兵人数 <code>retainNum</code> 为 <code>n</code>，循环下面的操作，直到全部士兵出圈。</li><li>初始化 <code>k = 0</code>，从第一个士兵开始计数，每次遍历到数值不为 <code>-1</code> 的元素，则 <code>k+1</code>，如果 <code>k = M</code>，则说明该士兵需要被淘汰出局，则元素的值置为 <code>-1</code>，淘汰的数量 <code>num + 1</code>，且 <code>k</code> 重新赋值为 0。</li><li>遍历数组元素，找到数值不为 <code>-1</code> 的元素，就是最后剩下的士兵。</li></ul><p>假设 5 个士兵，数到 3 就淘汰，具体的执行过程如下：</p><p><img src="https://wyr-image.oss-cn-beijing.aliyuncs.com/img/9fcd82ac838503c695ffd16c1ae16eb0-0.gif"></p><h3 id="代码实现如下："><a href="#代码实现如下：" class="headerlink" title="代码实现如下："></a>代码实现如下：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">m</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> lastRemaining = <span class="keyword">function</span>(<span class="params">n, m</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> peoples = <span class="keyword">new</span> <span class="title class_">Array</span>(n);</span><br><span class="line">    <span class="comment">// 当前指针索引</span></span><br><span class="line">    <span class="keyword">let</span> index = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 循环数 0 到 m</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 环中剩下的人数</span></span><br><span class="line">    <span class="keyword">let</span> remainNum = n;</span><br><span class="line">    <span class="comment">// 将所有的人数都淘汰出圈</span></span><br><span class="line">    <span class="keyword">while</span> (remainNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 索引 +1</span></span><br><span class="line">      index++;</span><br><span class="line">      <span class="comment">// 如果当前索引已经超过数组的长度，则需要将索引移动至数组的开头位置</span></span><br><span class="line">      <span class="keyword">if</span> (index == n) &#123;</span><br><span class="line">        <span class="comment">// 索引移动至开头</span></span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果元素的值等于 -1，说明这个士兵已经被淘汰了，不计数，直接跳过</span></span><br><span class="line">      <span class="keyword">if</span> (peoples[index] == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 否则计数</span></span><br><span class="line">        count++;</span><br><span class="line">        <span class="comment">// 如果计数到 m，说明该士兵需要被淘汰</span></span><br><span class="line">        <span class="keyword">if</span> (count == m) &#123;</span><br><span class="line">          <span class="comment">// 数值置为 -1</span></span><br><span class="line">          peoples[index] = -<span class="number">1</span>;</span><br><span class="line">          <span class="comment">// 计数归 0</span></span><br><span class="line">          count = <span class="number">0</span>;</span><br><span class="line">          <span class="comment">// 圈内的人数减少 1</span></span><br><span class="line">          remainNum--;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="滑动窗口的最大值"><a href="#滑动窗口的最大值" class="headerlink" title="滑动窗口的最大值"></a>滑动窗口的最大值</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>假设给定一个整形数组 <code>nums</code> 和一个大小为 <code>k</code> 的窗口，<code>k</code> 小于 <code>nums</code> 的长度，窗口从数组的最左边，每次滑动一个数，一直到最右边，返回每次滑动窗口中的最大值的数组。</p><p>假设输入的数组为 <code>nums[] = &#123; 3， 5 ， -1 ， 3 ， 2 ， 5 ， 1 ， 6 &#125;</code>，窗口大小 k &#x3D; 3。</p><p>滑动窗口具体如下，<code>[]</code> 中即滑动窗口的内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ 3  5  -1]  3  2  5  1  6       5</span><br><span class="line">  3 [5  -1   3] 2  5  1  6       5</span><br><span class="line">  3  5 [-1   3  2] 5  1  6       3</span><br><span class="line">  3  5  -1 [ 3  2  5] 1  6       5</span><br><span class="line">  3  5  -1   3 [2  5  1] 6       5</span><br><span class="line">  3  5  -1   3  2 [5  1  6]      6</span><br></pre></td></tr></table></figure><h3 id="求解思路-1"><a href="#求解思路-1" class="headerlink" title="求解思路"></a>求解思路</h3><ul><li>遍历数组 <code>nums[]</code> 中的元素 <code>num[i]</code>，执行以下的操作。</li><li>执行循环：如果队列不为空，且以队列的最后一个元素为下标的数组元素 <code>nums[queue.peekLast()]</code> 小于 <code>num[i]</code> 时，将队列的最后一个元素删除。意为：删除队列中较小的元素索引。</li><li>将当前元素下标 i 添加到队列的尾部。</li><li>如果队列的队首元素小于 <code>i-k</code>，则移除队首的元素，说明队首的元素索引已经超过了滑动窗口的长度了，应该抛弃队首的索引。</li><li>如果 <code>i</code> 大于等于 <code>k-1</code>，那么说明滑动窗口长度已经生效，此时的队列第一个元素作为索引，取出数组中的数值，就是 <code>i-k+1</code> 为起始的滑动窗口的最大值。</li></ul><p>以 nums[] &#x3D; {3，5，-1，3，2，5，1，6} 为例，窗口大小 <code>k = 3</code>。</p><ul><li><code>i = 0</code>，<code>nums[0] = 3</code>，队列为空，添加索引 0 到队列尾部，队列为 <code>&#123; 0 &#125;</code>。</li></ul><p><img src="https://wyr-image.oss-cn-beijing.aliyuncs.com/img/7848060af4772dbb9cef8ca9208831e6-0.png"></p><ul><li><code>i = 1</code>，<code>nums[1] = 5</code>，队列为 <code>&#123; 0 &#125;</code>，队列尾部元素为 0，<code>nums[0] &lt; nums[1]</code>，则需要把 0 移除，此时队列为 <code>&#123;&#125;</code>，添加 1 进去，队列变为 <code>&#123; 1 &#125;</code>。</li></ul><p><img src="https://wyr-image.oss-cn-beijing.aliyuncs.com/img/34e1b5732f06f43b9ed68a7a62d6fb1f-0.png"></p><ul><li><code>i = 2</code>，<code>nums[2] = -1</code>，队列为 <code>&#123;1&#125;</code>，队列尾部元素为 1，<code>nums[1] &gt; nums[2]</code>，不移除，直接把索引 2 加到队列中，队列变成 <code>&#123; 1，2 &#125;</code>，此时 <code>i &gt;= k-1</code> 满足，也就是滑动窗口生效。<code>results[i-k+1] = results[0]</code> 的值为以队列的第一个元素 1 为索引的数组元素，即 <code>nums[1] = 5</code>，因此 <code>results[0] = 5</code>。</li></ul><p><img src="https://wyr-image.oss-cn-beijing.aliyuncs.com/img/8400a473cff4224acdd27ca6db4ce9e8-0.png"></p><ul><li><code>i = 3</code>，<code>nums[3] = 3</code>，此时队列为 <code>&#123; 1，2 &#125;</code>，队列尾部元素为 2，<code>nums[2] &lt; nums[3]</code>，因此需要将队列尾部的 2 移除，队列变成 <code>&#123; 1 &#125;</code>，此时队尾元素为 1，<code>nums[1] = 5 &gt; nums[3]</code>，不再移除元素。将当前的索引 3 添加至队列中，队列变成 <code>&#123; 1，3 &#125;</code>。此时的队首元素的为 1，当前遍历索引为 3，符合条件，不做移除，<code>results[i-k+1] = results[1]</code> 的值为以队列的第一个元素 1 为索引的数组元素，即 <code>nums[1] = 5</code>，因此 <code>results[1] = 5</code>。</li></ul><p><img src="https://wyr-image.oss-cn-beijing.aliyuncs.com/img/ebf3d696b7b53d2077d1a14d4a6e6db2-0.png"></p><ul><li><code>i = 4</code>，<code>nums[4] = 2</code>，当前队列为 <code>&#123; 1， 3 &#125;</code>，队尾元素为 3，<code>nums[3]</code> 为 3，<code>nums[4] &lt; nums[3]</code>，因此不需要移除队列尾部的索引元素，直接将当前索引位置 4 加到队列中。队列变成 <code>&#123;1，3，4&#125;</code>，队列的第一个元素（设为 <code>first</code>）为 1，索引为 1 的元素已经不在当前窗口（<code>i-k &gt;= first</code>），需要移除队列头部元素，因此队列变成 <code>&#123; 3，4 &#125;</code>，<code>i &gt;= k-1</code> 满足，因此 <code>results[i-k+1] = results[4-3+1] = results[2]</code> 的值为以队列的第一个元素 3 （当前队列第一个元素）为索引的数组元素，即 <code>nums[3] = 3</code>，因此 <code>results[2] = 3</code>。</li></ul><p><img src="https://wyr-image.oss-cn-beijing.aliyuncs.com/img/dc2f79b629f1d8218b46794c41257d69-0.png"></p><ul><li><code>i = 5</code>，<code>nums[5] = 5</code>，当前队列为 <code>&#123;3，4&#125;</code>，队列不为空，队尾元素为 4，<code>nums[4] = 2 &lt; nums[5]</code>，因此需要移除队尾元素 4。队列变成 <code>&#123;3&#125;</code>，队尾元素为 3，<code>nums[3] = 3 &lt; nums[5]</code>，因此还需要移除队尾元素 3，队列为空 <code>&#123;&#125;</code>。接着将当前索引 5 添加到当前的队列中，队列为 <code>&#123;5&#125;</code>，队首元素是 5，处在当前有效窗口内，<code>i &gt;= k-1</code> 满足，因此 <code>results[i-k+1] = results[5-3+1] = results[3]</code> 的值为以队列的第一个元素 5（当前队列第一个元素）为索引的数组元素，即 <code>nums[5] = 5</code>，因此 <code>results[3]=5</code>。</li></ul><p><img src="https://wyr-image.oss-cn-beijing.aliyuncs.com/img/fb658082c29c567a0ef985c042e01785-0.png"></p><ul><li><code>i = 6</code>，<code>nums[6] = 1</code>，当前队列为 <code>&#123; 5 &#125;</code>，队列不为空，队尾元素为 5，<code>nums[5] = 5 &gt; nums[6]</code>，因此不需要移除队尾元素。直接将当前索引 6 添加到队列中，队列变成为 <code>&#123; 5，6 &#125;</code>，队首元素为索引 5，当前索引 <code>i = 6</code>，处于有效窗口内，因此不需要移除队首元素。<code>i &gt;= k-1</code> 满足，因此 <code>results[i-k+1] = results[6-3+1] = results[4]</code> 的值为以队列的第一个元素 5 (当前队列第一个元素)为索引的数组元素，即 <code>nums[5] = 5</code>，因此 <code>results[4] = 5</code>。</li></ul><p><img src="https://wyr-image.oss-cn-beijing.aliyuncs.com/img/d9d39656b63cf705d40eb1977de51378-0.png"></p><ul><li><code>i = 7</code>，<code>nums[7] = 6</code>，当前队列为 <code>&#123; 5，6 &#125;</code>，队列不为空，队尾元素为 6，<code>nums[6] = 1 &lt; nums[7]</code>，因此需要将队尾元素移除，队列变成 <code>&#123;5&#125;</code>，当前的队尾元素为 5。<code>nums[5] = 5 &lt; nums[7]</code>，因此还需要将队尾元素移除，此时队列为空 <code>&#123;&#125;</code>，直接将当前的索引 7 添加到队列尾部，队列变成 <code>&#123;7&#125;</code>，队首元素为 7，索引为 <code>i = 7</code>，处于有效的滑动窗口内，因此不需要移除队首元素。<code>i &gt;= k-1</code> 满足，因此<code>results[i-k+1] = results[7-3+1] = results[5]</code> 的值为以队列的第一个元素 7 (当前队列第一个元素)为索引的数组元素，即 <code>nums[7] = 6</code>，因此 <code>results[4] = 6</code>。</li></ul><p><img src="https://wyr-image.oss-cn-beijing.aliyuncs.com/img/850ac1765a9fdfe3d28e081131eac00c-0.png"></p><ul><li><code>i = 8</code>，超出数组范围，结束。</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxSlidingWindow = <span class="keyword">function</span> (<span class="params">nums, k</span>) &#123;</span><br><span class="line">    <span class="comment">// 单调下降的队列，最大值就是对头元素</span></span><br><span class="line">    <span class="keyword">let</span> res = [];<span class="comment">//保存答案</span></span><br><span class="line">    <span class="keyword">let</span> queue = [];<span class="comment">//要维护的队列,队列中存的数组下表，不是数组元素</span></span><br><span class="line">    <span class="keyword">let</span> len = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (queue.<span class="property">length</span> &amp;&amp; queue[<span class="number">0</span>] &lt;= i - k) queue.<span class="title function_">shift</span>();<span class="comment">//超出了k的窗口长度，弹出对头元素</span></span><br><span class="line">        <span class="comment">//进来的元素&gt;=队尾元素，就将从队中元素弹出，他因为他永远不可能是答案</span></span><br><span class="line">        <span class="keyword">while</span> (queue.<span class="property">length</span> &amp;&amp; nums[queue[queue.<span class="property">length</span> - <span class="number">1</span>]] &lt;= nums[i]) queue.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line">        queue.<span class="title function_">push</span>(i);</span><br><span class="line">        <span class="comment">// 从下标是k-1的时候就开始插入</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) res.<span class="title function_">push</span>(nums[queue[<span class="number">0</span>]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="找链表的倒数第k个元素"><a href="#找链表的倒数第k个元素" class="headerlink" title="找链表的倒数第k个元素"></a>找链表的倒数第k个元素</h2><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><p>输入一个链表，输出该链表中倒数第k个节点。</p><h3 id="求解思路-2"><a href="#求解思路-2" class="headerlink" title="求解思路"></a>求解思路</h3><p>首先想到的方法，先用一个指针，从头到尾走完，并且边走边计数，可以获得链表的长度 <code>n</code>。然后再使用一个指针又从头开始，走到 <code>n-k+1</code> 的位置，就是倒数第 <code>k</code> 个元素。但是这样就需要遍历两次，并不优雅。</p><p>因此我们可以让两次遍历一起进行，也就是<strong>两个指针</strong>，一前一后，前后指针，先让第 1 个指针先走 k 步，然后第 2 个指针开始与第 1 个指针一起走，直到第 1 个指针走到最后的位置，此时第 2 个指针停留的位置就是倒数第 k 个元素。</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">var</span> getKthFromEnd = <span class="keyword">function</span>(<span class="params">head, k</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> fast=head</span><br><span class="line">    <span class="keyword">let</span> slow=head</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(fast &amp;&amp; k&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        fast=fast.<span class="property">next</span></span><br><span class="line">        k--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!fast) <span class="keyword">return</span> head.<span class="property">next</span></span><br><span class="line">    <span class="keyword">while</span>(fast)&#123;</span><br><span class="line">        fast=fast.<span class="property">next</span></span><br><span class="line">        slow=slow.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="判断一个链表是否有环"><a href="#判断一个链表是否有环" class="headerlink" title="判断一个链表是否有环"></a>判断一个链表是否有环</h2><h3 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h3><p>给一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。</p><h3 id="求解思路-3"><a href="#求解思路-3" class="headerlink" title="求解思路"></a>求解思路</h3><p>如果我们让一个快指针每次走两步，慢指针每次走一步，如果快慢两个指针能够相遇的话，说明快指针走过环并且已经从后面追上了慢指针，那就可以证明环的存在了。如果没有环，那么快指针会直接走到链表的尾部，到达 null 节点，此时链表肯定不存在环的。</p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hasCycle = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">  <span class="comment">// 快慢指针初始化指向 head</span></span><br><span class="line">  <span class="keyword">let</span> slow = head;</span><br><span class="line">  <span class="keyword">let</span> fast = head;</span><br><span class="line">  <span class="comment">// 快指针走到末尾时停止</span></span><br><span class="line">  <span class="keyword">while</span> (fast &amp;&amp; fast.<span class="property">next</span>) &#123;</span><br><span class="line">    <span class="comment">// 慢指针走一步，快指针走两步</span></span><br><span class="line">    slow = slow.<span class="property">next</span>;</span><br><span class="line">    fast = fast.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">    <span class="comment">// 快慢指针相遇，说明含有环</span></span><br><span class="line">    <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 不包含环</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="两个链表的第一个公共节点"><a href="#两个链表的第一个公共节点" class="headerlink" title="两个链表的第一个公共节点"></a>两个链表的第一个公共节点</h2><h3 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h3><p>现在有两个链表（没有环），但是存在着共同的部分，找出它们的第一个公共结点，例如，下面的两条链表</p><p><img src="https://wyr-image.oss-cn-beijing.aliyuncs.com/img/639b16eb431ffc4c4a71bd5479690b89-0.png"></p><h3 id="求解思路-4"><a href="#求解思路-4" class="headerlink" title="求解思路"></a>求解思路</h3><p>从图中我们可以得知，其实从相同节点开始，后面那部分链表都是相同的，也就是如果链表可以从后面开始遍历的话，同时移动，就可以获取到相同的节点。但是明显不能从后面开始遍历，那总得想办法从前面开始遍历时，能同时到达共同节点。</p><p>于是，第一个链表后面拼接上第二个链表，第二个链表后面拼接上第一个链表，链表等长了，而且相同的那个元素的位置一样，都在倒数第 2 个</p><p><img src="https://wyr-image.oss-cn-beijing.aliyuncs.com/img/768353940ea9313a9879ff1adaaaaab8-0.png"></p><p>第一个和第二个链表都从第一个节点开始比较，只要相等，就说明是第一个公共节点（即是节点 6）</p><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getIntersectionNode</span> = (<span class="params">A, B</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> pA = A,</span><br><span class="line">        pB = B;</span><br><span class="line">    <span class="keyword">while</span> (pA !== pB) &#123;</span><br><span class="line">        <span class="comment">// 如果下一个节点为空，则切换到另一个链表的头节点，否则下一个节点</span></span><br><span class="line">        pA = pA === <span class="literal">null</span> ? B : pA.<span class="property">next</span>;</span><br><span class="line">        pB = pB === <span class="literal">null</span> ? A : pB.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pA;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><h3 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h3><p>给一个链表，要求反转链表后，输出新链表的表头节点。</p><h3 id="求解思路-5"><a href="#求解思路-5" class="headerlink" title="求解思路"></a>求解思路</h3><p>只需要使用循环，不断把指向下一个的指针，指向前面的节点。</p><p>假设链表是 <code>1 -&gt; 2 -&gt; 3 -&gt; 4</code>，那么我们需要在开始的时候借助一个 <code>null</code> 节点，当 <code>head</code> 节点不为空的时候，先保存 <code>head</code> 的下一个节点，然后将 <code>head</code> 的 <code>next</code> 指向修改为指向反向，然后移动 <code>head</code> 指针</p><h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> last=<span class="literal">null</span></span><br><span class="line">    <span class="keyword">while</span>(head!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> nexthead=head.<span class="property">next</span></span><br><span class="line">        head.<span class="property">next</span>=last </span><br><span class="line">        last=head</span><br><span class="line">        head=nexthead;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> last</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="合并有序链表"><a href="#合并有序链表" class="headerlink" title="合并有序链表"></a>合并有序链表</h2><h3 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h3><p>假设两个单调递增的链表，我们要把它们合成一个链表，合并之后的链表需要保持递增的性质，返回头节点，这该怎么做呢？</p><h3 id="求解思路-6"><a href="#求解思路-6" class="headerlink" title="求解思路"></a>求解思路</h3><p>创建一个 <code>-1</code> 节点的新链表，然后两个链表都从头开始遍历，循环直到一个链表遍历到最后，在这个过程中，哪一个链表的节点小，就加入新的链表后面，移动到后面一个节点，接着比较。</p><p>之后遍历两个链表剩下的元素，这些元素肯定比另一个链表的所有元素都大或者相等，直接加入新的链表后面即可。</p><h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">l1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">l2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">var</span> mergeTwoLists = <span class="keyword">function</span>(<span class="params">l1, l2</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建-1头节点</span></span><br><span class="line">    <span class="keyword">const</span> prehead=<span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">let</span> prev=prehead</span><br><span class="line">    <span class="comment">// 只要不为空，则比较</span></span><br><span class="line">    <span class="keyword">while</span>(l1!=<span class="literal">null</span> &amp;&amp; l2!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">// l1的节点更小</span></span><br><span class="line">        <span class="keyword">if</span>(l1.<span class="property">val</span>&lt;=l2.<span class="property">val</span>)&#123;</span><br><span class="line">            prev.<span class="property">next</span>=l1</span><br><span class="line">            l1=l1.<span class="property">next</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            prev.<span class="property">next</span>=l2</span><br><span class="line">            l2=l2.<span class="property">next</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 新链表指针后移</span></span><br><span class="line">        prev=prev.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//l1和l2有剩余元素全部加入</span></span><br><span class="line">    prev.<span class="property">next</span>= l1 === <span class="literal">null</span>? l2 :l1</span><br><span class="line">    <span class="keyword">return</span> prehead.<span class="property">next</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
